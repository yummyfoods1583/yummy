--selecting all districts
SELECT * FROM DISTRICT;

--select user
SELECT * FROM USERS WHERE USER_ID= '*****' AND PASSWORD='*****'

--select all subdistricts under a district
SELECT * FROM SUB_DISTRICT WHERE DIST_NAME=$1

--insert a customer
--step-1: insert users
INSERT INTO users (user_ID, user_type, name, PASSWORD, mobile) SELECT $1, $2, $3, $4, $5 WHERE NOT EXISTS (SELECT * FROM users WHERE user_id = 'ruhan-ruhan');
INSERT INTO CUSTOMER VALUES($1,$2,$3,$4,$5)

--if insertion occurred then push information into the customer
INSERT INTO CUSTOMER VALUES ($1,$2,$3,$4,$5) 

--find restaurants based on condition
SELECT R1.REST_ID,
  R1.SUB_DIST_ID,
  R1.EMAIL,
  R1.OPENING_TIME,
  R1.CLOSING_TIME,
  R1.CLOSE_UNTIL,
  R1.REST_DETAILS,
  R1.MANAGER_ID,
  R1.PHOTO_URL,
  R1.PAYMENT_METHOD,
  R1.RATING,
  R1.DETAILED_ADDRESS,
  U.NAME,
  U.MOBILE, COUNT(R2.REST_ID) AS RATING_COUNT FROM RESTAURANTS R1 LEFT JOIN USERS U 
ON (R1.REST_ID=U.USER_ID)
LEFT JOIN REVIEW R2
ON(R1.REST_ID=R2.REST_ID)
LEFT JOIN SUB_DISTRICT S
ON(S.SUB_DIST_ID=R1.SUB_DIST_ID)
WHERE (:DIST_NAME IS NULL OR S.DIST_NAME=::DIST_NAME ) AND (:SUB_DIST_ID IS NULL OR S.SUB_DIST_ID=:SUB_DIST_ID) AND
(:RATING_MIN IS NULL OR R1.RATING>=:RATING_MIN) AND (:RATING_MAX IS NULL OR R1.RATING<=:RATING_MAX) AND (:NAME IS NULL OR U.NAME=:NAME)
GROUP BY R1.REST_ID, R1.SUB_DIST_ID, R1.EMAIL, R1.OPENING_TIME, R1.CLOSING_TIME, R1.CLOSE_UNTIL, R1.REST_DETAILS, R1.MANAGER_ID, R1.PHOTO_URL, R1.PAYMENT_METHOD, R1.RATING, R1.DETAILED_ADDRESS, U.NAME, U.MOBILE
ORDER BY R1.RATING ASC
